---
title: "Web scraping MLB Data"
format:
  html: default
editor_options: 
  chunk_output_type: console
---
```{r}
#| include: FALSE

library(stringr)
library(rvest)
library(httr)
library(tidyverse)
library(dplyr)
```

```{r}
get_mvp_by_year <- function(year, hasNL) {
  
  url <- str_c("https://www.baseball-reference.com/awards/awards_", year, ".shtml")
  
  print(url)
  
  robotstxt::paths_allowed(url)
  
  mlb_html <- read_html(url)
  
  tables <- mlb_html |>
    html_nodes(css = "table") |>
    html_table()
  
  mvp_col_names <- c("Rank", "Name", "Team", "Vote_PTS", "First_Place", "Share", "WAR", "BS_G", "AB", "R", "BS_H", "BS_HR", "RBI", "SB", "BS_BB", "BA", "OBP", "SLG", "OPS", "W", "L", "ERA", "WHIP", "PS_G", "GS", "SV", "IP", "PS_H", "PS_HR", "PS_BB","SO")
  
  mvp_voting_al <- tables[[1]]
  
  mvp_voting_al <- mvp_voting_al |>
    setNames(mvp_col_names) |>
    select(-Rank) |>
    slice(2) |>
    mutate(Year = year,
           Lg = "AL",
           Share = str_replace(Share, "%", ""),
           Share = as.numeric(Share),
           across(c("Vote_PTS", "First_Place", "WAR", "BS_G", "AB", "R", "BS_H", "BS_HR", "RBI", "SB", "BS_BB", "BA", "OBP", "SLG", "OPS", "W", "L", "ERA", "WHIP", "PS_G", "GS", "SV", "IP", "PS_H", "PS_HR", "PS_BB", "SO"), ~as.numeric(.))) |>
    select("Year","Name", "Lg", "Team", "Vote_PTS", "First_Place", "WAR", "BS_G", "AB", "R", "BS_H", "BS_HR", "RBI", "SB", "BS_BB", "BA", "OBP", "SLG", "OPS", "W", "L", "ERA", "WHIP", "PS_G", "GS", "SV", "IP", "PS_H", "PS_HR", "PS_BB", "SO")
  
  if(hasNL) {
    mvp_voting_nl <- tables[[2]]
    
    mvp_voting_nl <- mvp_voting_nl |>
    setNames(mvp_col_names) |>
    select(-Rank) |>
    slice(2) |>
    mutate(Year = year,
           Lg = "NL",
           Share = str_replace(Share, "%", ""),
           Share = as.numeric(Share),
           across(c("Vote_PTS", "First_Place", "WAR", "BS_G", "AB", "R", "BS_H", "BS_HR", "RBI", "SB", "BS_BB", "BA", "OBP", "SLG", "OPS", "W", "L", "ERA", "WHIP", "PS_G", "GS", "SV", "IP", "PS_H", "PS_HR", "PS_BB", "SO"), ~as.numeric(.))) |>
    select("Year","Name", "Lg", "Team", "Vote_PTS", "First_Place", "WAR", "BS_G", "AB", "R", "BS_H", "BS_HR", "RBI", "SB", "BS_BB", "BA", "OBP", "SLG", "OPS", "W", "L", "ERA", "WHIP", "PS_G", "GS", "SV", "IP", "PS_H", "PS_HR", "PS_BB", "SO")
  
  
  mvp_voting <- mvp_voting_al |>
    add_row(mvp_voting_nl)
  
  mvp_voting
  } else{
    mvp_voting_al
  }
}
```

```{r}
mvp_voting_2023 <- get_mvp_by_year(2023)

mvp_voting_full <- mvp_voting_2023

for (year in c(1911:1914, 1922:2023)) {
  
  if(year == 1922 | year == 1923) {
    mvp_voting_full <- mvp_voting_full |>
      bind_rows(get_mvp_by_year(year, FALSE))
  } else {
    mvp_voting_full <- mvp_voting_full |>
      bind_rows(get_mvp_by_year(year, TRUE))
  }
  
  # Need to wait: Error Code 429 - Too many requests
  Sys.sleep(5)
}

mvp_voting_full <- mvp_voting_full |>
  distinct(Year, Lg, .keep_all = TRUE) |>
  arrange(Year)

write.csv(mvp_voting_full, "./data/mvp_voting.csv")
```


```{r}
mvp_voting_full <- read_csv("./data/mvp_voting.csv")
```



```{r}
MVP_DAT<- read_html("https://www.baseball-reference.com/awards/mvp.shtml") |>
  html_nodes("table") %>%
  .[[1]] %>%  
  html_table()

CYA_DAT<- read_html("https://www.baseball-reference.com/awards/cya.shtml") |>
  html_nodes("table") %>%
  .[[1]] %>%  
  html_table()

ROY_DAT<- read_html("https://www.baseball-reference.com/awards/roy.shtml") |>
  html_nodes("table") %>%
  .[[1]] %>%  
  html_table()


colnames(MVP_DAT) <- as.character(MVP_DAT[1,])
colnames(ROY_DAT) <- as.character(ROY_DAT[1,])
MVP_DAT<- MVP_DAT|>
  filter(Year!= "Year")|>
  filter(Year >= 1911)|>
  mutate(Pitcher = ifelse(IP > 10, TRUE, FALSE),Year = as.numeric(Year), across(.cols = WAR:SO, .fns = ~as.numeric(as.character(.))) )
MVP_DAT

ROY_DAT<- ROY_DAT|>
   filter(Year!= "Year")|>
  filter(Year >= 1911)|>
  mutate(Pitcher = ifelse(IP > 10, TRUE, FALSE),Year = as.numeric(Year), across(.cols = WAR:SO, .fns = ~as.numeric(as.character(.))) )

ROY_DAT

write.csv(ROY_DAT, "./data/mlb_roy.csv")

CYA_DAT<- CYA_DAT|>
  mutate(Year= as.numeric(Year), across(.cols = WAR:SO, .fns = ~as.numeric(as.character(.))))|>
  filter(Year>1900)|>
  mutate(Reliver= ifelse(SV>10, 1, 0))
  

CYA_DAT

write.csv(CYA_DAT, "./data/mlb_cya.csv")
```



```{r}
mlb_mvp <- mvp_voting_full |>
  select(-WAR, -RBI, -SB, -BA, -OBP, -SLG, -W, -L, -SV, -IP, -ERA, -SO) |>
  inner_join(MVP_DAT, by = join_by(Name, Year, Lg)) |>
  select(-Voting, -Tm, -...1)

write.csv(mlb_mvp, "./data/mlb_mvp.csv")
```

```{r}

#AMERICAN LEAGUE 
Soto_DAT <- read_html("https://www.baseball-reference.com/players/s/sotoju01.shtml")|>
  html_nodes("table") %>%
  .[[2]] %>%  
  html_table()

so_pred<- Soto_DAT|>
  filter(PA== "704")

WITT_DAT <- read_html("https://www.baseball-reference.com/players/w/wittbo02.shtml")|>
  html_nodes("table") %>%
  .[[2]] %>%  
  html_table()
wi_pred<- WITT_DAT|>
  filter(PA== "698")

TROUT_DAT <- read_html("https://www.baseball-reference.com/players/t/troutmi01.shtml")|>
  html_nodes("table") %>%
  .[[2]] %>%  
  html_table()
tr_pred<- TROUT_DAT|>
  filter(PA== "709")
#NATIONAL LEAGUE
Shohei_DAT<- read_html("https://www.baseball-reference.com/players/o/ohtansh01.shtml") |>
  html_nodes("table") %>%
  .[[2]] %>%  
  html_table()

oh_pred <- Shohei_DAT|>
  filter(PA == "668")

BETTS_DAT<- read_html("https://www.baseball-reference.com/players/b/bettsmo01.shtml") |>
  html_nodes("table") %>%
  .[[2]] %>%  
  html_table()

be_pred <- BETTS_DAT|>
  filter(PA == "738")

ACUNA_DAT<- read_html("https://www.baseball-reference.com/players/a/acunaro01.shtml") |>
  html_nodes("table") %>%
  .[[2]] %>%  
  html_table()

ACUNA_DAT

ac_pred <- ACUNA_DAT|>
  filter(PA == "731")

ac_pred

all_preds <- bind_rows(so_pred, wi_pred, tr_pred, oh_pred, be_pred, ac_pred)

all_preds<- all_preds|>
  mutate(Name = case_when(
    PA == "704" ~ "Soto",
    PA == "698" ~ "Witt",
    PA == "709" ~ "Trout",
    PA == "668" ~ "Ohtani",
    PA == "738" ~ "Betts",
    PA == "731" ~ "Acuna Jr",
    TRUE ~ NA_character_
  ))
all_preds <- all_preds %>%
  select(Name, SLG, AB, R, H, HR, BB, OPS, BA, OBP, RBI, SB)

write.csv(all_preds, "./data/mlb_pred_mvp.csv")
```


